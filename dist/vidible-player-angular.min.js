!function(e){"use strict";var i=e.module("ngLoadScript",[]);i.directive("script",function(){return{restrict:"E",scope:!1,link:function(e,i,t){if("text/javascript-lazy"===t.type){var a=document.createElement("script");a.type="text/javascript";var n=i.attr("src");if(void 0!==n)a.src=n;else{var r=i.text();a.text=r}document.head.appendChild(a),i.remove()}}}})}(angular),function(e){"use strict";var i=e.module("vidible-module",["ngLoadScript"]);i.directive("vidiblePlayer",["$timeout",function(e){function i(e){switch(e){case vidible.PLAYER_READY:return a+"ready";case vidible.VIDEO_END:return a+"end";case vidible.VIDEO_PAUSE:return a+"pause";case vidible.VIDEO_PLAY:return a+"play"}}var t=1,a="vidible.player.";return{restrict:"EA",scope:{videoId:"=videoId",playerId:"@playerId"},link:function(a,n,r){function c(){var e=Array.prototype.slice.call(arguments);a.$apply(function(){a.$emit.apply(a,e)})}function d(e){[vidible.PLAYER_READY,vidible.VIDEO_END,vidible.VIDEO_PAUSE,vidible.VIDEO_PLAY].forEach(function(t){e.addEventListener(t,function(a){c(i(t),e,a)})})}function l(i,t){i.vdb_Player?t(i.vdb_Player):e(function(){l(i,t)},0)}function o(i){u();var t=angular.element('<div class="player vdb_player vdb_55c8aae9e4b0ca68372fb55355af9dcae4b02944c03a2eee"></div>'),a=angular.element('<script type="text/javascript-lazy" src="//delivery.vidible.tv/jsonp/pid=55c8aae9e4b0ca68372fb553/vid='+i+'/55af9dcae4b02944c03a2eee.js"></script>');t.append(a),e(function(){n.append(t),l(t[0],d)},0)}function u(){a.player&&a.player.destroy(),n.empty()}var v=n[0].id||r.playerId||"page-unique-vidible-id-"+t++;n[0].id=v;var p=a.$watch(function(){return"undefined"!=typeof a.videoId},function(e){e&&(p(),a.$watch("videoId",function(){o(a.videoId)}))});a.$on("$destroy",function(){u()})}}}])}(angular);
//# sourceMappingURL=data:application/json;base64,