!function(e){"use strict";var t=e.module("ngLoadScript",[]);t.directive("script",function(){return{restrict:"E",scope:!1,link:function(e,t,i){if("text/javascript-lazy"===i.type){var n=document.createElement("script");n.type="text/javascript";var r=t.attr("src");if(void 0!==r)n.src=r;else{var a=t.text();n.text=a}document.head.appendChild(n),t.remove()}}}})}(angular),function(e){"use strict";e.module("vidible-module",[]).service("vidibleQueueLoader",["$http","$timeout",function(t,i){function n(e,i){var n="http://delivery.vidible.tv/jsonp/pid=55c8aae9e4b0ca68372fb553/vid="+e+"/55af9dcae4b02944c03a2eee.js";t.get(n).then(function(e){i(e.status,"<script>"+e.data+"</script>")},function(e){i(e.status,null)})}function r(e,t,n){if(u||(u=(new Date).getTime()),e.vdb_Player)t(e.vdb_Player),u=null;else{var a=(new Date).getTime(),o=a-u;if(o>=n)return console.error("timout while waiting to vidible script to load..."),console.log(e),void(u=null);i(function(){r(e,t,n)},0)}}function a(){if(c.length>0){var t=c.shift(),i=t.elem;n(t.vid,function(n,o){if(200==n){var c=e.element(i);c.addClass("vdb_55c8aae9e4b0ca68372fb55355af9dcae4b02944c03a2eee"),c.append(o),r(i,function(){a()},d)}else console.error("Error loading vidable with id = "+t.vid),a()})}}var o={},d=5e3,c=[],u=null;return o.queueForProcessing=function(e,t){c.push({vid:t,elem:e}),c.length>1||a()},o}]).directive("vidiblePlayer",["$timeout","vidibleQueueLoader",function(e,t){var i=1;return{restrict:"EA",scope:{videoId:"=videoId",playerId:"@playerId"},link:function(e,n,r){function a(e){o();var i=angular.element('<div class="player vdb_player"></div>');n.append(i),t.queueForProcessing(i,e)}function o(){e.player&&e.player.destroy(),n.empty()}var d=n[0].id||r.playerId||"page-unique-vidible-id-"+i++;n[0].id=d;var c=e.$watch(function(){return"undefined"!=typeof e.videoId},function(t){t&&(c(),e.$watch("videoId",function(){a(e.videoId)}))});e.$on("$destroy",function(){o()})}}}])}(angular);
//# sourceMappingURL=data:application/json;base64,