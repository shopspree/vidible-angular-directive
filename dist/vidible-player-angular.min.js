!function(e){"use strict";var i=e.module("ngLoadScript",[]);i.directive("script",function(){return{restrict:"E",scope:!1,link:function(e,i,t){if("text/javascript-lazy"===t.type){var n=document.createElement("script");n.type="text/javascript";var r=i.attr("src");if(void 0!==r)n.src=r;else{var a=i.text();n.text=a}document.head.appendChild(n),i.remove()}}}})}(angular),function(e){"use strict";var i=e.module("vidible-module",["ngLoadScript"]);i.directive("vidiblePlayer",["$timeout",function(e){function i(e){switch(e){case vidible.PLAYER_READY:return n+"ready";case vidible.VIDEO_END:return n+"end";case vidible.VIDEO_PAUSE:return n+"pause";case vidible.VIDEO_PLAY:return n+"play"}}var t=1,n="vidible.player.";return{restrict:"E",replace:!0,template:'<div class="player vdb_player vdb_55c8aae9e4b0ca68372fb55355af9dcae4b02944c03a2eee"></div>',scope:{videoId:"@videoId"},link:function(n,r,a){function c(){var e=Array.prototype.slice.call(arguments);n.$apply(function(){n.$emit.apply(n,e)})}function d(e){[vidible.PLAYER_READY,vidible.VIDEO_END,vidible.VIDEO_PAUSE,vidible.VIDEO_PLAY].forEach(function(t){e.addEventListener(t,function(e){c(i(t),n.player,e)})})}function l(i,t){i.vdb_Player?t(i.vdb_Player):e(function(){l(i,t)},0)}function o(){return angular.element(document.getElementById(v))}function u(i){var t=o();if(0===t.length)console.error("Couldn't find element with id = "+n.playerId+". Make sure the player directive is correctly placed in the DOM.");else{var r=angular.element('<script type="text/javascript-lazy" src="//delivery.vidible.tv/jsonp/pid=55c8aae9e4b0ca68372fb553/vid='+i+'/55af9dcae4b02944c03a2eee.js"></script>');e(function(){t.append(r),l(t[0],d)},0)}}var v=r[0].id||a.videoId||"page-unique-vidible-id-"+t++;r[0].id=v;var p=n.$watch(function(){return"undefined"!=typeof n.videoId},function(e){e&&(p(),n.$watch("videoId",function(){u(a.videoId)}))})}}}])}(angular);
//# sourceMappingURL=data:application/json;base64,